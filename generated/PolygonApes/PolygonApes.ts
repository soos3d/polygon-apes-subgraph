// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class ClaimConditionsUpdated extends ethereum.Event {
  get params(): ClaimConditionsUpdated__Params {
    return new ClaimConditionsUpdated__Params(this);
  }
}

export class ClaimConditionsUpdated__Params {
  _event: ClaimConditionsUpdated;

  constructor(event: ClaimConditionsUpdated) {
    this._event = event;
  }

  get claimConditions(): Array<ClaimConditionsUpdatedClaimConditionsStruct> {
    return this._event.parameters[0].value.toTupleArray<
      ClaimConditionsUpdatedClaimConditionsStruct
    >();
  }
}

export class ClaimConditionsUpdatedClaimConditionsStruct extends ethereum.Tuple {
  get startTimestamp(): BigInt {
    return this[0].toBigInt();
  }

  get maxClaimableSupply(): BigInt {
    return this[1].toBigInt();
  }

  get supplyClaimed(): BigInt {
    return this[2].toBigInt();
  }

  get quantityLimitPerTransaction(): BigInt {
    return this[3].toBigInt();
  }

  get waitTimeInSecondsBetweenClaims(): BigInt {
    return this[4].toBigInt();
  }

  get merkleRoot(): Bytes {
    return this[5].toBytes();
  }

  get pricePerToken(): BigInt {
    return this[6].toBigInt();
  }

  get currency(): Address {
    return this[7].toAddress();
  }
}

export class DefaultRoyalty extends ethereum.Event {
  get params(): DefaultRoyalty__Params {
    return new DefaultRoyalty__Params(this);
  }
}

export class DefaultRoyalty__Params {
  _event: DefaultRoyalty;

  constructor(event: DefaultRoyalty) {
    this._event = event;
  }

  get newRoyaltyRecipient(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newRoyaltyBps(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class MaxTotalSupplyUpdated extends ethereum.Event {
  get params(): MaxTotalSupplyUpdated__Params {
    return new MaxTotalSupplyUpdated__Params(this);
  }
}

export class MaxTotalSupplyUpdated__Params {
  _event: MaxTotalSupplyUpdated;

  constructor(event: MaxTotalSupplyUpdated) {
    this._event = event;
  }

  get maxTotalSupply(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class MaxWalletClaimCountUpdated extends ethereum.Event {
  get params(): MaxWalletClaimCountUpdated__Params {
    return new MaxWalletClaimCountUpdated__Params(this);
  }
}

export class MaxWalletClaimCountUpdated__Params {
  _event: MaxWalletClaimCountUpdated;

  constructor(event: MaxWalletClaimCountUpdated) {
    this._event = event;
  }

  get count(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class NFTRevealed extends ethereum.Event {
  get params(): NFTRevealed__Params {
    return new NFTRevealed__Params(this);
  }
}

export class NFTRevealed__Params {
  _event: NFTRevealed;

  constructor(event: NFTRevealed) {
    this._event = event;
  }

  get endTokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get revealedURI(): string {
    return this._event.parameters[1].value.toString();
  }
}

export class OwnerUpdated extends ethereum.Event {
  get params(): OwnerUpdated__Params {
    return new OwnerUpdated__Params(this);
  }
}

export class OwnerUpdated__Params {
  _event: OwnerUpdated;

  constructor(event: OwnerUpdated) {
    this._event = event;
  }

  get prevOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PlatformFeeInfoUpdated extends ethereum.Event {
  get params(): PlatformFeeInfoUpdated__Params {
    return new PlatformFeeInfoUpdated__Params(this);
  }
}

export class PlatformFeeInfoUpdated__Params {
  _event: PlatformFeeInfoUpdated;

  constructor(event: PlatformFeeInfoUpdated) {
    this._event = event;
  }

  get platformFeeRecipient(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get platformFeeBps(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class PrimarySaleRecipientUpdated extends ethereum.Event {
  get params(): PrimarySaleRecipientUpdated__Params {
    return new PrimarySaleRecipientUpdated__Params(this);
  }
}

export class PrimarySaleRecipientUpdated__Params {
  _event: PrimarySaleRecipientUpdated;

  constructor(event: PrimarySaleRecipientUpdated) {
    this._event = event;
  }

  get recipient(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class RoleAdminChanged extends ethereum.Event {
  get params(): RoleAdminChanged__Params {
    return new RoleAdminChanged__Params(this);
  }
}

export class RoleAdminChanged__Params {
  _event: RoleAdminChanged;

  constructor(event: RoleAdminChanged) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get previousAdminRole(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get newAdminRole(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class RoleGranted extends ethereum.Event {
  get params(): RoleGranted__Params {
    return new RoleGranted__Params(this);
  }
}

export class RoleGranted__Params {
  _event: RoleGranted;

  constructor(event: RoleGranted) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RoleRevoked extends ethereum.Event {
  get params(): RoleRevoked__Params {
    return new RoleRevoked__Params(this);
  }
}

export class RoleRevoked__Params {
  _event: RoleRevoked;

  constructor(event: RoleRevoked) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RoyaltyForToken extends ethereum.Event {
  get params(): RoyaltyForToken__Params {
    return new RoyaltyForToken__Params(this);
  }
}

export class RoyaltyForToken__Params {
  _event: RoyaltyForToken;

  constructor(event: RoyaltyForToken) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get royaltyRecipient(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get royaltyBps(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class TokensClaimed extends ethereum.Event {
  get params(): TokensClaimed__Params {
    return new TokensClaimed__Params(this);
  }
}

export class TokensClaimed__Params {
  _event: TokensClaimed;

  constructor(event: TokensClaimed) {
    this._event = event;
  }

  get claimConditionIndex(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get claimer(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get receiver(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get startTokenId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get quantityClaimed(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class TokensLazyMinted extends ethereum.Event {
  get params(): TokensLazyMinted__Params {
    return new TokensLazyMinted__Params(this);
  }
}

export class TokensLazyMinted__Params {
  _event: TokensLazyMinted;

  constructor(event: TokensLazyMinted) {
    this._event = event;
  }

  get startTokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get endTokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get baseURI(): string {
    return this._event.parameters[2].value.toString();
  }

  get encryptedBaseURI(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class WalletClaimCountUpdated extends ethereum.Event {
  get params(): WalletClaimCountUpdated__Params {
    return new WalletClaimCountUpdated__Params(this);
  }
}

export class WalletClaimCountUpdated__Params {
  _event: WalletClaimCountUpdated;

  constructor(event: WalletClaimCountUpdated) {
    this._event = event;
  }

  get wallet(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get count(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class PolygonApes__claimConditionResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getCurrentStartId(): BigInt {
    return this.value0;
  }

  getCount(): BigInt {
    return this.value1;
  }
}

export class PolygonApes__getClaimConditionByIdResultConditionStruct extends ethereum.Tuple {
  get startTimestamp(): BigInt {
    return this[0].toBigInt();
  }

  get maxClaimableSupply(): BigInt {
    return this[1].toBigInt();
  }

  get supplyClaimed(): BigInt {
    return this[2].toBigInt();
  }

  get quantityLimitPerTransaction(): BigInt {
    return this[3].toBigInt();
  }

  get waitTimeInSecondsBetweenClaims(): BigInt {
    return this[4].toBigInt();
  }

  get merkleRoot(): Bytes {
    return this[5].toBytes();
  }

  get pricePerToken(): BigInt {
    return this[6].toBigInt();
  }

  get currency(): Address {
    return this[7].toAddress();
  }
}

export class PolygonApes__getClaimTimestampResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getLastClaimTimestamp(): BigInt {
    return this.value0;
  }

  getNextValidClaimTimestamp(): BigInt {
    return this.value1;
  }
}

export class PolygonApes__getDefaultRoyaltyInfoResult {
  value0: Address;
  value1: i32;

  constructor(value0: Address, value1: i32) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set(
      "value1",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value1))
    );
    return map;
  }

  getValue0(): Address {
    return this.value0;
  }

  getValue1(): i32 {
    return this.value1;
  }
}

export class PolygonApes__getPlatformFeeInfoResult {
  value0: Address;
  value1: i32;

  constructor(value0: Address, value1: i32) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set(
      "value1",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value1))
    );
    return map;
  }

  getValue0(): Address {
    return this.value0;
  }

  getValue1(): i32 {
    return this.value1;
  }
}

export class PolygonApes__getRoyaltyInfoForTokenResult {
  value0: Address;
  value1: i32;

  constructor(value0: Address, value1: i32) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set(
      "value1",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value1))
    );
    return map;
  }

  getValue0(): Address {
    return this.value0;
  }

  getValue1(): i32 {
    return this.value1;
  }
}

export class PolygonApes__royaltyInfoResult {
  value0: Address;
  value1: BigInt;

  constructor(value0: Address, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getReceiver(): Address {
    return this.value0;
  }

  getRoyaltyAmount(): BigInt {
    return this.value1;
  }
}

export class PolygonApes__verifyClaimMerkleProofResult {
  value0: boolean;
  value1: BigInt;

  constructor(value0: boolean, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getValidMerkleProof(): boolean {
    return this.value0;
  }

  getMerkleProofIndex(): BigInt {
    return this.value1;
  }
}

export class PolygonApes extends ethereum.SmartContract {
  static bind(address: Address): PolygonApes {
    return new PolygonApes("PolygonApes", address);
  }

  DEFAULT_ADMIN_ROLE(): Bytes {
    let result = super.call(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DEFAULT_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  baseURIIndices(param0: BigInt): BigInt {
    let result = super.call(
      "baseURIIndices",
      "baseURIIndices(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_baseURIIndices(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "baseURIIndices",
      "baseURIIndices(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  claimCondition(): PolygonApes__claimConditionResult {
    let result = super.call(
      "claimCondition",
      "claimCondition():(uint256,uint256)",
      []
    );

    return new PolygonApes__claimConditionResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_claimCondition(): ethereum.CallResult<PolygonApes__claimConditionResult> {
    let result = super.tryCall(
      "claimCondition",
      "claimCondition():(uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PolygonApes__claimConditionResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  contractType(): Bytes {
    let result = super.call("contractType", "contractType():(bytes32)", []);

    return result[0].toBytes();
  }

  try_contractType(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("contractType", "contractType():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  contractURI(): string {
    let result = super.call("contractURI", "contractURI():(string)", []);

    return result[0].toString();
  }

  try_contractURI(): ethereum.CallResult<string> {
    let result = super.tryCall("contractURI", "contractURI():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  contractVersion(): i32 {
    let result = super.call("contractVersion", "contractVersion():(uint8)", []);

    return result[0].toI32();
  }

  try_contractVersion(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "contractVersion",
      "contractVersion():(uint8)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  encryptDecrypt(data: Bytes, key: Bytes): Bytes {
    let result = super.call(
      "encryptDecrypt",
      "encryptDecrypt(bytes,bytes):(bytes)",
      [ethereum.Value.fromBytes(data), ethereum.Value.fromBytes(key)]
    );

    return result[0].toBytes();
  }

  try_encryptDecrypt(data: Bytes, key: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "encryptDecrypt",
      "encryptDecrypt(bytes,bytes):(bytes)",
      [ethereum.Value.fromBytes(data), ethereum.Value.fromBytes(key)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  encryptedData(param0: BigInt): Bytes {
    let result = super.call("encryptedData", "encryptedData(uint256):(bytes)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBytes();
  }

  try_encryptedData(param0: BigInt): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "encryptedData",
      "encryptedData(uint256):(bytes)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getActiveClaimConditionId(): BigInt {
    let result = super.call(
      "getActiveClaimConditionId",
      "getActiveClaimConditionId():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getActiveClaimConditionId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getActiveClaimConditionId",
      "getActiveClaimConditionId():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getBaseURICount(): BigInt {
    let result = super.call(
      "getBaseURICount",
      "getBaseURICount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getBaseURICount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBaseURICount",
      "getBaseURICount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getClaimConditionById(
    _conditionId: BigInt
  ): PolygonApes__getClaimConditionByIdResultConditionStruct {
    let result = super.call(
      "getClaimConditionById",
      "getClaimConditionById(uint256):((uint256,uint256,uint256,uint256,uint256,bytes32,uint256,address))",
      [ethereum.Value.fromUnsignedBigInt(_conditionId)]
    );

    return changetype<PolygonApes__getClaimConditionByIdResultConditionStruct>(
      result[0].toTuple()
    );
  }

  try_getClaimConditionById(
    _conditionId: BigInt
  ): ethereum.CallResult<
    PolygonApes__getClaimConditionByIdResultConditionStruct
  > {
    let result = super.tryCall(
      "getClaimConditionById",
      "getClaimConditionById(uint256):((uint256,uint256,uint256,uint256,uint256,bytes32,uint256,address))",
      [ethereum.Value.fromUnsignedBigInt(_conditionId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<PolygonApes__getClaimConditionByIdResultConditionStruct>(
        value[0].toTuple()
      )
    );
  }

  getClaimTimestamp(
    _conditionId: BigInt,
    _claimer: Address
  ): PolygonApes__getClaimTimestampResult {
    let result = super.call(
      "getClaimTimestamp",
      "getClaimTimestamp(uint256,address):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_conditionId),
        ethereum.Value.fromAddress(_claimer)
      ]
    );

    return new PolygonApes__getClaimTimestampResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getClaimTimestamp(
    _conditionId: BigInt,
    _claimer: Address
  ): ethereum.CallResult<PolygonApes__getClaimTimestampResult> {
    let result = super.tryCall(
      "getClaimTimestamp",
      "getClaimTimestamp(uint256,address):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_conditionId),
        ethereum.Value.fromAddress(_claimer)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PolygonApes__getClaimTimestampResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  getDefaultRoyaltyInfo(): PolygonApes__getDefaultRoyaltyInfoResult {
    let result = super.call(
      "getDefaultRoyaltyInfo",
      "getDefaultRoyaltyInfo():(address,uint16)",
      []
    );

    return new PolygonApes__getDefaultRoyaltyInfoResult(
      result[0].toAddress(),
      result[1].toI32()
    );
  }

  try_getDefaultRoyaltyInfo(): ethereum.CallResult<
    PolygonApes__getDefaultRoyaltyInfoResult
  > {
    let result = super.tryCall(
      "getDefaultRoyaltyInfo",
      "getDefaultRoyaltyInfo():(address,uint16)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PolygonApes__getDefaultRoyaltyInfoResult(
        value[0].toAddress(),
        value[1].toI32()
      )
    );
  }

  getPlatformFeeInfo(): PolygonApes__getPlatformFeeInfoResult {
    let result = super.call(
      "getPlatformFeeInfo",
      "getPlatformFeeInfo():(address,uint16)",
      []
    );

    return new PolygonApes__getPlatformFeeInfoResult(
      result[0].toAddress(),
      result[1].toI32()
    );
  }

  try_getPlatformFeeInfo(): ethereum.CallResult<
    PolygonApes__getPlatformFeeInfoResult
  > {
    let result = super.tryCall(
      "getPlatformFeeInfo",
      "getPlatformFeeInfo():(address,uint16)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PolygonApes__getPlatformFeeInfoResult(
        value[0].toAddress(),
        value[1].toI32()
      )
    );
  }

  getRoleAdmin(role: Bytes): Bytes {
    let result = super.call("getRoleAdmin", "getRoleAdmin(bytes32):(bytes32)", [
      ethereum.Value.fromFixedBytes(role)
    ]);

    return result[0].toBytes();
  }

  try_getRoleAdmin(role: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getRoleAdmin",
      "getRoleAdmin(bytes32):(bytes32)",
      [ethereum.Value.fromFixedBytes(role)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getRoleMember(role: Bytes, index: BigInt): Address {
    let result = super.call(
      "getRoleMember",
      "getRoleMember(bytes32,uint256):(address)",
      [
        ethereum.Value.fromFixedBytes(role),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );

    return result[0].toAddress();
  }

  try_getRoleMember(role: Bytes, index: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getRoleMember",
      "getRoleMember(bytes32,uint256):(address)",
      [
        ethereum.Value.fromFixedBytes(role),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getRoleMemberCount(role: Bytes): BigInt {
    let result = super.call(
      "getRoleMemberCount",
      "getRoleMemberCount(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(role)]
    );

    return result[0].toBigInt();
  }

  try_getRoleMemberCount(role: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRoleMemberCount",
      "getRoleMemberCount(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(role)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRoyaltyInfoForToken(
    _tokenId: BigInt
  ): PolygonApes__getRoyaltyInfoForTokenResult {
    let result = super.call(
      "getRoyaltyInfoForToken",
      "getRoyaltyInfoForToken(uint256):(address,uint16)",
      [ethereum.Value.fromUnsignedBigInt(_tokenId)]
    );

    return new PolygonApes__getRoyaltyInfoForTokenResult(
      result[0].toAddress(),
      result[1].toI32()
    );
  }

  try_getRoyaltyInfoForToken(
    _tokenId: BigInt
  ): ethereum.CallResult<PolygonApes__getRoyaltyInfoForTokenResult> {
    let result = super.tryCall(
      "getRoyaltyInfoForToken",
      "getRoyaltyInfoForToken(uint256):(address,uint16)",
      [ethereum.Value.fromUnsignedBigInt(_tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PolygonApes__getRoyaltyInfoForTokenResult(
        value[0].toAddress(),
        value[1].toI32()
      )
    );
  }

  hasRole(role: Bytes, account: Address): boolean {
    let result = super.call("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_hasRole(role: Bytes, account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isTrustedForwarder(forwarder: Address): boolean {
    let result = super.call(
      "isTrustedForwarder",
      "isTrustedForwarder(address):(bool)",
      [ethereum.Value.fromAddress(forwarder)]
    );

    return result[0].toBoolean();
  }

  try_isTrustedForwarder(forwarder: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isTrustedForwarder",
      "isTrustedForwarder(address):(bool)",
      [ethereum.Value.fromAddress(forwarder)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  maxTotalSupply(): BigInt {
    let result = super.call("maxTotalSupply", "maxTotalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_maxTotalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxTotalSupply",
      "maxTotalSupply():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxWalletClaimCount(): BigInt {
    let result = super.call(
      "maxWalletClaimCount",
      "maxWalletClaimCount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_maxWalletClaimCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxWalletClaimCount",
      "maxWalletClaimCount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  multicall(data: Array<Bytes>): Array<Bytes> {
    let result = super.call("multicall", "multicall(bytes[]):(bytes[])", [
      ethereum.Value.fromBytesArray(data)
    ]);

    return result[0].toBytesArray();
  }

  try_multicall(data: Array<Bytes>): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall("multicall", "multicall(bytes[]):(bytes[])", [
      ethereum.Value.fromBytesArray(data)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  nextTokenIdToClaim(): BigInt {
    let result = super.call(
      "nextTokenIdToClaim",
      "nextTokenIdToClaim():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_nextTokenIdToClaim(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "nextTokenIdToClaim",
      "nextTokenIdToClaim():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  nextTokenIdToMint(): BigInt {
    let result = super.call(
      "nextTokenIdToMint",
      "nextTokenIdToMint():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_nextTokenIdToMint(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "nextTokenIdToMint",
      "nextTokenIdToMint():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  primarySaleRecipient(): Address {
    let result = super.call(
      "primarySaleRecipient",
      "primarySaleRecipient():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_primarySaleRecipient(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "primarySaleRecipient",
      "primarySaleRecipient():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  reveal(index: BigInt, _key: Bytes): string {
    let result = super.call("reveal", "reveal(uint256,bytes):(string)", [
      ethereum.Value.fromUnsignedBigInt(index),
      ethereum.Value.fromBytes(_key)
    ]);

    return result[0].toString();
  }

  try_reveal(index: BigInt, _key: Bytes): ethereum.CallResult<string> {
    let result = super.tryCall("reveal", "reveal(uint256,bytes):(string)", [
      ethereum.Value.fromUnsignedBigInt(index),
      ethereum.Value.fromBytes(_key)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  royaltyInfo(
    tokenId: BigInt,
    salePrice: BigInt
  ): PolygonApes__royaltyInfoResult {
    let result = super.call(
      "royaltyInfo",
      "royaltyInfo(uint256,uint256):(address,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromUnsignedBigInt(salePrice)
      ]
    );

    return new PolygonApes__royaltyInfoResult(
      result[0].toAddress(),
      result[1].toBigInt()
    );
  }

  try_royaltyInfo(
    tokenId: BigInt,
    salePrice: BigInt
  ): ethereum.CallResult<PolygonApes__royaltyInfoResult> {
    let result = super.tryCall(
      "royaltyInfo",
      "royaltyInfo(uint256,uint256):(address,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromUnsignedBigInt(salePrice)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PolygonApes__royaltyInfoResult(
        value[0].toAddress(),
        value[1].toBigInt()
      )
    );
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenByIndex(index: BigInt): BigInt {
    let result = super.call("tokenByIndex", "tokenByIndex(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(index)
    ]);

    return result[0].toBigInt();
  }

  try_tokenByIndex(index: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenByIndex",
      "tokenByIndex(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenOfOwnerByIndex(owner: Address, index: BigInt): BigInt {
    let result = super.call(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );

    return result[0].toBigInt();
  }

  try_tokenOfOwnerByIndex(
    owner: Address,
    index: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenURI(_tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(_tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  verifyClaimMerkleProof(
    _conditionId: BigInt,
    _claimer: Address,
    _quantity: BigInt,
    _proofs: Array<Bytes>,
    _proofMaxQuantityPerTransaction: BigInt
  ): PolygonApes__verifyClaimMerkleProofResult {
    let result = super.call(
      "verifyClaimMerkleProof",
      "verifyClaimMerkleProof(uint256,address,uint256,bytes32[],uint256):(bool,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_conditionId),
        ethereum.Value.fromAddress(_claimer),
        ethereum.Value.fromUnsignedBigInt(_quantity),
        ethereum.Value.fromFixedBytesArray(_proofs),
        ethereum.Value.fromUnsignedBigInt(_proofMaxQuantityPerTransaction)
      ]
    );

    return new PolygonApes__verifyClaimMerkleProofResult(
      result[0].toBoolean(),
      result[1].toBigInt()
    );
  }

  try_verifyClaimMerkleProof(
    _conditionId: BigInt,
    _claimer: Address,
    _quantity: BigInt,
    _proofs: Array<Bytes>,
    _proofMaxQuantityPerTransaction: BigInt
  ): ethereum.CallResult<PolygonApes__verifyClaimMerkleProofResult> {
    let result = super.tryCall(
      "verifyClaimMerkleProof",
      "verifyClaimMerkleProof(uint256,address,uint256,bytes32[],uint256):(bool,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_conditionId),
        ethereum.Value.fromAddress(_claimer),
        ethereum.Value.fromUnsignedBigInt(_quantity),
        ethereum.Value.fromFixedBytesArray(_proofs),
        ethereum.Value.fromUnsignedBigInt(_proofMaxQuantityPerTransaction)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PolygonApes__verifyClaimMerkleProofResult(
        value[0].toBoolean(),
        value[1].toBigInt()
      )
    );
  }

  walletClaimCount(param0: Address): BigInt {
    let result = super.call(
      "walletClaimCount",
      "walletClaimCount(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_walletClaimCount(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "walletClaimCount",
      "walletClaimCount(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }
}

export class ClaimCall extends ethereum.Call {
  get inputs(): ClaimCall__Inputs {
    return new ClaimCall__Inputs(this);
  }

  get outputs(): ClaimCall__Outputs {
    return new ClaimCall__Outputs(this);
  }
}

export class ClaimCall__Inputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }

  get _receiver(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _quantity(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _currency(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _pricePerToken(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _proofs(): Array<Bytes> {
    return this._call.inputValues[4].value.toBytesArray();
  }

  get _proofMaxQuantityPerTransaction(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class ClaimCall__Outputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }
}

export class GrantRoleCall extends ethereum.Call {
  get inputs(): GrantRoleCall__Inputs {
    return new GrantRoleCall__Inputs(this);
  }

  get outputs(): GrantRoleCall__Outputs {
    return new GrantRoleCall__Outputs(this);
  }
}

export class GrantRoleCall__Inputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class GrantRoleCall__Outputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _defaultAdmin(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _name(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _symbol(): string {
    return this._call.inputValues[2].value.toString();
  }

  get _contractURI(): string {
    return this._call.inputValues[3].value.toString();
  }

  get _trustedForwarders(): Array<Address> {
    return this._call.inputValues[4].value.toAddressArray();
  }

  get _saleRecipient(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get _royaltyRecipient(): Address {
    return this._call.inputValues[6].value.toAddress();
  }

  get _royaltyBps(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }

  get _platformFeeBps(): BigInt {
    return this._call.inputValues[8].value.toBigInt();
  }

  get _platformFeeRecipient(): Address {
    return this._call.inputValues[9].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class LazyMintCall extends ethereum.Call {
  get inputs(): LazyMintCall__Inputs {
    return new LazyMintCall__Inputs(this);
  }

  get outputs(): LazyMintCall__Outputs {
    return new LazyMintCall__Outputs(this);
  }
}

export class LazyMintCall__Inputs {
  _call: LazyMintCall;

  constructor(call: LazyMintCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _baseURIForTokens(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _data(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class LazyMintCall__Outputs {
  _call: LazyMintCall;

  constructor(call: LazyMintCall) {
    this._call = call;
  }
}

export class MulticallCall extends ethereum.Call {
  get inputs(): MulticallCall__Inputs {
    return new MulticallCall__Inputs(this);
  }

  get outputs(): MulticallCall__Outputs {
    return new MulticallCall__Outputs(this);
  }
}

export class MulticallCall__Inputs {
  _call: MulticallCall;

  constructor(call: MulticallCall) {
    this._call = call;
  }

  get data(): Array<Bytes> {
    return this._call.inputValues[0].value.toBytesArray();
  }
}

export class MulticallCall__Outputs {
  _call: MulticallCall;

  constructor(call: MulticallCall) {
    this._call = call;
  }

  get results(): Array<Bytes> {
    return this._call.outputValues[0].value.toBytesArray();
  }
}

export class RenounceRoleCall extends ethereum.Call {
  get inputs(): RenounceRoleCall__Inputs {
    return new RenounceRoleCall__Inputs(this);
  }

  get outputs(): RenounceRoleCall__Outputs {
    return new RenounceRoleCall__Outputs(this);
  }
}

export class RenounceRoleCall__Inputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RenounceRoleCall__Outputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }
}

export class RevealCall extends ethereum.Call {
  get inputs(): RevealCall__Inputs {
    return new RevealCall__Inputs(this);
  }

  get outputs(): RevealCall__Outputs {
    return new RevealCall__Outputs(this);
  }
}

export class RevealCall__Inputs {
  _call: RevealCall;

  constructor(call: RevealCall) {
    this._call = call;
  }

  get index(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _key(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class RevealCall__Outputs {
  _call: RevealCall;

  constructor(call: RevealCall) {
    this._call = call;
  }

  get revealedURI(): string {
    return this._call.outputValues[0].value.toString();
  }
}

export class RevokeRoleCall extends ethereum.Call {
  get inputs(): RevokeRoleCall__Inputs {
    return new RevokeRoleCall__Inputs(this);
  }

  get outputs(): RevokeRoleCall__Outputs {
    return new RevokeRoleCall__Outputs(this);
  }
}

export class RevokeRoleCall__Inputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RevokeRoleCall__Outputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetClaimConditionsCall extends ethereum.Call {
  get inputs(): SetClaimConditionsCall__Inputs {
    return new SetClaimConditionsCall__Inputs(this);
  }

  get outputs(): SetClaimConditionsCall__Outputs {
    return new SetClaimConditionsCall__Outputs(this);
  }
}

export class SetClaimConditionsCall__Inputs {
  _call: SetClaimConditionsCall;

  constructor(call: SetClaimConditionsCall) {
    this._call = call;
  }

  get _phases(): Array<SetClaimConditionsCall_phasesStruct> {
    return this._call.inputValues[0].value.toTupleArray<
      SetClaimConditionsCall_phasesStruct
    >();
  }

  get _resetClaimEligibility(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetClaimConditionsCall__Outputs {
  _call: SetClaimConditionsCall;

  constructor(call: SetClaimConditionsCall) {
    this._call = call;
  }
}

export class SetClaimConditionsCall_phasesStruct extends ethereum.Tuple {
  get startTimestamp(): BigInt {
    return this[0].toBigInt();
  }

  get maxClaimableSupply(): BigInt {
    return this[1].toBigInt();
  }

  get supplyClaimed(): BigInt {
    return this[2].toBigInt();
  }

  get quantityLimitPerTransaction(): BigInt {
    return this[3].toBigInt();
  }

  get waitTimeInSecondsBetweenClaims(): BigInt {
    return this[4].toBigInt();
  }

  get merkleRoot(): Bytes {
    return this[5].toBytes();
  }

  get pricePerToken(): BigInt {
    return this[6].toBigInt();
  }

  get currency(): Address {
    return this[7].toAddress();
  }
}

export class SetContractURICall extends ethereum.Call {
  get inputs(): SetContractURICall__Inputs {
    return new SetContractURICall__Inputs(this);
  }

  get outputs(): SetContractURICall__Outputs {
    return new SetContractURICall__Outputs(this);
  }
}

export class SetContractURICall__Inputs {
  _call: SetContractURICall;

  constructor(call: SetContractURICall) {
    this._call = call;
  }

  get _uri(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetContractURICall__Outputs {
  _call: SetContractURICall;

  constructor(call: SetContractURICall) {
    this._call = call;
  }
}

export class SetDefaultRoyaltyInfoCall extends ethereum.Call {
  get inputs(): SetDefaultRoyaltyInfoCall__Inputs {
    return new SetDefaultRoyaltyInfoCall__Inputs(this);
  }

  get outputs(): SetDefaultRoyaltyInfoCall__Outputs {
    return new SetDefaultRoyaltyInfoCall__Outputs(this);
  }
}

export class SetDefaultRoyaltyInfoCall__Inputs {
  _call: SetDefaultRoyaltyInfoCall;

  constructor(call: SetDefaultRoyaltyInfoCall) {
    this._call = call;
  }

  get _royaltyRecipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _royaltyBps(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetDefaultRoyaltyInfoCall__Outputs {
  _call: SetDefaultRoyaltyInfoCall;

  constructor(call: SetDefaultRoyaltyInfoCall) {
    this._call = call;
  }
}

export class SetMaxTotalSupplyCall extends ethereum.Call {
  get inputs(): SetMaxTotalSupplyCall__Inputs {
    return new SetMaxTotalSupplyCall__Inputs(this);
  }

  get outputs(): SetMaxTotalSupplyCall__Outputs {
    return new SetMaxTotalSupplyCall__Outputs(this);
  }
}

export class SetMaxTotalSupplyCall__Inputs {
  _call: SetMaxTotalSupplyCall;

  constructor(call: SetMaxTotalSupplyCall) {
    this._call = call;
  }

  get _maxTotalSupply(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMaxTotalSupplyCall__Outputs {
  _call: SetMaxTotalSupplyCall;

  constructor(call: SetMaxTotalSupplyCall) {
    this._call = call;
  }
}

export class SetMaxWalletClaimCountCall extends ethereum.Call {
  get inputs(): SetMaxWalletClaimCountCall__Inputs {
    return new SetMaxWalletClaimCountCall__Inputs(this);
  }

  get outputs(): SetMaxWalletClaimCountCall__Outputs {
    return new SetMaxWalletClaimCountCall__Outputs(this);
  }
}

export class SetMaxWalletClaimCountCall__Inputs {
  _call: SetMaxWalletClaimCountCall;

  constructor(call: SetMaxWalletClaimCountCall) {
    this._call = call;
  }

  get _count(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMaxWalletClaimCountCall__Outputs {
  _call: SetMaxWalletClaimCountCall;

  constructor(call: SetMaxWalletClaimCountCall) {
    this._call = call;
  }
}

export class SetOwnerCall extends ethereum.Call {
  get inputs(): SetOwnerCall__Inputs {
    return new SetOwnerCall__Inputs(this);
  }

  get outputs(): SetOwnerCall__Outputs {
    return new SetOwnerCall__Outputs(this);
  }
}

export class SetOwnerCall__Inputs {
  _call: SetOwnerCall;

  constructor(call: SetOwnerCall) {
    this._call = call;
  }

  get _newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetOwnerCall__Outputs {
  _call: SetOwnerCall;

  constructor(call: SetOwnerCall) {
    this._call = call;
  }
}

export class SetPlatformFeeInfoCall extends ethereum.Call {
  get inputs(): SetPlatformFeeInfoCall__Inputs {
    return new SetPlatformFeeInfoCall__Inputs(this);
  }

  get outputs(): SetPlatformFeeInfoCall__Outputs {
    return new SetPlatformFeeInfoCall__Outputs(this);
  }
}

export class SetPlatformFeeInfoCall__Inputs {
  _call: SetPlatformFeeInfoCall;

  constructor(call: SetPlatformFeeInfoCall) {
    this._call = call;
  }

  get _platformFeeRecipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _platformFeeBps(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetPlatformFeeInfoCall__Outputs {
  _call: SetPlatformFeeInfoCall;

  constructor(call: SetPlatformFeeInfoCall) {
    this._call = call;
  }
}

export class SetPrimarySaleRecipientCall extends ethereum.Call {
  get inputs(): SetPrimarySaleRecipientCall__Inputs {
    return new SetPrimarySaleRecipientCall__Inputs(this);
  }

  get outputs(): SetPrimarySaleRecipientCall__Outputs {
    return new SetPrimarySaleRecipientCall__Outputs(this);
  }
}

export class SetPrimarySaleRecipientCall__Inputs {
  _call: SetPrimarySaleRecipientCall;

  constructor(call: SetPrimarySaleRecipientCall) {
    this._call = call;
  }

  get _saleRecipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetPrimarySaleRecipientCall__Outputs {
  _call: SetPrimarySaleRecipientCall;

  constructor(call: SetPrimarySaleRecipientCall) {
    this._call = call;
  }
}

export class SetRoyaltyInfoForTokenCall extends ethereum.Call {
  get inputs(): SetRoyaltyInfoForTokenCall__Inputs {
    return new SetRoyaltyInfoForTokenCall__Inputs(this);
  }

  get outputs(): SetRoyaltyInfoForTokenCall__Outputs {
    return new SetRoyaltyInfoForTokenCall__Outputs(this);
  }
}

export class SetRoyaltyInfoForTokenCall__Inputs {
  _call: SetRoyaltyInfoForTokenCall;

  constructor(call: SetRoyaltyInfoForTokenCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _bps(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SetRoyaltyInfoForTokenCall__Outputs {
  _call: SetRoyaltyInfoForTokenCall;

  constructor(call: SetRoyaltyInfoForTokenCall) {
    this._call = call;
  }
}

export class SetWalletClaimCountCall extends ethereum.Call {
  get inputs(): SetWalletClaimCountCall__Inputs {
    return new SetWalletClaimCountCall__Inputs(this);
  }

  get outputs(): SetWalletClaimCountCall__Outputs {
    return new SetWalletClaimCountCall__Outputs(this);
  }
}

export class SetWalletClaimCountCall__Inputs {
  _call: SetWalletClaimCountCall;

  constructor(call: SetWalletClaimCountCall) {
    this._call = call;
  }

  get _claimer(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _count(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetWalletClaimCountCall__Outputs {
  _call: SetWalletClaimCountCall;

  constructor(call: SetWalletClaimCountCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}
